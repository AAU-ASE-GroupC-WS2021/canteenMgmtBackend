version: 2.1

parameters:
  run-main:
    type: boolean
    default: true
  run-performance-tests:
    type: boolean
    default: false
  performance-user-threads:
    type: integer
    default: 10
  performance-user-iterations:
    type: integer
    default: 100
  performance-owner-threads:
    type: integer
    default: 1
  performance-owner-iterations:
    type: integer
    default: 100
  performance-admin-threads:
    type: integer
    default: 5
  performance-admin-iterations:
    type: integer
    default: 100
  performance-pause-randmax:
    type: integer
    default: 100
  performance-pause-const:
    type: integer
    default: 50

orbs:
  sonarcloud: sonarsource/sonarcloud@1.0.3

jobs:
  build-and-test:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      - run:
          name: Test
          command: mvn test
      - run:
          name: Analyze on SonarCloud
          command: mvn verify sonar:sonar -Dsonar.projectKey=elsantner_canteenMgmtBackend

  build-and-deploy:
    machine: true
    steps:
      - checkout
      - run:
          name: Install Heroku shell
          command: sudo curl https://cli-assets.heroku.com/install.sh | sh
      - run:
          name: Login to Heroku container registry
          command: HEROKU_API_KEY=${HEROKU_API_KEY} heroku container:login
      - run:
          name: Build and push container
          command: HEROKU_API_KEY=${HEROKU_API_KEY} heroku container:push -a ${HEROKU_APP_NAME} web
      - run:
          name: Deploy container
          command: HEROKU_API_KEY=${HEROKU_API_KEY} heroku container:release -a ${HEROKU_APP_NAME} web

  performance-tests:
    docker:
      # first `image` defines the primary container where all steps will run
      # if no `name:` is provided, services are accessible through `localhost`
      - image: cimg/openjdk:17.0
      - image: postgres:12.9
        environment:
          POSTGRES_PASSWORD: mysecretpassword
    steps:
      - checkout
      - run:
          name: Run backend
          command: mvn spring-boot:run
          background: true
      - run:
          name: Install Java 11
          command: sudo apt-get -y update && sudo apt-get -y install openjdk-11-jdk-headless
      - run:
          name: Install psql
          command: sudo apt-get -y install postgresql-client
      # Wait for the server to start responding. We expect Bad Request 400 once it starts listening.
      # so override the shell and have the last command be the : { null } command to force exit code 0.
      - run:
          name: Wait for backend to start
          shell: /bin/sh
          command: |
            wget --retry-connrefused --waitretry=2 --read-timeout=20 --timeout=15 -t 20 http://localhost:8080/
            :
      # Set up test fixture
      - run:
          name: Set up test fixture
          command: |
            export PGPASSWORD=mysecretpassword 
            psql -h 127.0.0.1 -p 5432 -d postgres -U postgres -f src/test/jmeter/fixture_setup.sql > /dev/null
      # Run all performance tests in src/test/jmeter of the repository
      - run:
          name: Run performance tests
          command: |
            export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))
            mvn verify -DjmeterUserThreads=<< pipeline.parameters.performance-user-threads >> \
                       -DjmeterUserIterations=<< pipeline.parameters.performance-user-iterations >> \
                       -DjmeterOwnerThreads=<< pipeline.parameters.performance-owner-threads >> \
                       -DjmeterOwnerIterations=<< pipeline.parameters.performance-owner-iterations >> \
                       -DjmeterAdminThreads=<< pipeline.parameters.performance-admin-threads >> \
                       -DjmeterAdminIterations=<< pipeline.parameters.performance-admin-iterations >> \
                       -DjmeterPauseRandMax=<< pipeline.parameters.performance-pause-randmax >> \
                       -DjmeterPauseConst=<< pipeline.parameters.performance-pause-const >> \
              -Pperformance -f pom.xml
      - store_artifacts:
          path: target/jmeter/reports

workflows:
  main:
    when:
      << pipeline.parameters.run-main >>
    jobs:
      - build-and-test:
          context: SonarCloud
      - build-and-deploy:
          context: Heroku-<< pipeline.git.branch >>
          requires:
            # Deploy after testing.
            - build-and-test
          filters:
            branches:
              only:
                - main
                - development
  nighly:
    when:
      << pipeline.parameters.run-performance-tests >>
    jobs:
      - performance-tests
